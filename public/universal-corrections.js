// universal-corrections.js - –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –±–∞–≥–∞

class UniversalCorrectionsModal {
    constructor() {
        this.currentEmployee = null;
        this.currentMonth = null;
        this.currentYear = null;
        this.originalData = null;
        this.adjustedData = null;
        this.hasUnsavedChanges = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    async open(employeeId, employeeName, month, year) {
        this.currentEmployee = { id: employeeId, name: employeeName };
        this.currentMonth = month;
        this.currentYear = year;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        await this.loadEmployeeData();
        
        // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.createModal();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    async loadEmployeeData() {
        try {
            const response = await fetch(`${API_BASE}/get-employee-full-data`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify({
                    employee_id: this.currentEmployee.id,
                    month: this.currentMonth,
                    year: this.currentYear
                })
            });
            
            const data = await response.json();
            this.originalData = data;
            this.adjustedData = JSON.parse(JSON.stringify(data)); // –ì–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è
            this.hasUnsavedChanges = false;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            this.originalData = {
                basePay: 1017,
                bonuses: 0,
                penalties: 0,
                shortages: 0,
                advanceCard: 1000,
                advanceCash: 0,
                salaryCard: 17,
                salaryCash: 0,
                totalGross: 1017,
                totalDeductions: 0,
                totalToPay: 1017,
                advanceTotal: 1000,
                salaryTotal: 17,
                shortagesList: []
            };
            this.adjustedData = JSON.parse(JSON.stringify(this.originalData));
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    createModal() {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        const existing = document.getElementById('universal-corrections-modal');
        if (existing) existing.remove();

        const modalHTML = `
        <div id="universal-corrections-modal" class="ucm-overlay">
            <div class="ucm-container">
                <div class="ucm-header">
                    <h2>üíº –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–ª–∞—Ç</h2>
                    <button class="ucm-close" onclick="ucModal.close()">‚úï</button>
                </div>
                
                <div class="ucm-employee-info">
                    <div class="ucm-info-card">
                        <h3>${this.currentEmployee.name}</h3>
                        <span class="ucm-period">${this.getMonthName(this.currentMonth)} ${this.currentYear}</span>
                    </div>
                </div>

                <div class="ucm-tabs">
                    <button class="ucm-tab active" data-tab="summary">üìä –°–í–û–î–ö–ê</button>
                    <button class="ucm-tab" data-tab="advance">üí∞ –ê–í–ê–ù–°</button>
                    <button class="ucm-tab" data-tab="salary">üíµ –ó–ê–†–ü–õ–ê–¢–ê</button>
                    <button class="ucm-tab" data-tab="bonuses">üéÅ –ü–†–ï–ú–ò–ò/–®–¢–†–ê–§–´</button>
                    <button class="ucm-tab" data-tab="shortages">üìâ –ù–ï–î–û–°–¢–ê–ß–ò</button>
                    <button class="ucm-tab" data-tab="special">‚ö° –û–°–û–ë–´–ï –°–õ–£–ß–ê–ò</button>
                </div>

                <div class="ucm-content">
                    <!-- –í–∫–ª–∞–¥–∫–∞ –°–≤–æ–¥–∫–∞ -->
                    <div class="ucm-tab-content active" data-content="summary">
                        ${this.renderSummaryTab()}
                    </div>
                    
                    <!-- –í–∫–ª–∞–¥–∫–∞ –ê–≤–∞–Ω—Å -->
                    <div class="ucm-tab-content" data-content="advance">
                        ${this.renderAdvanceTab()}
                    </div>
                    
                    <!-- –í–∫–ª–∞–¥–∫–∞ –ó–∞—Ä–ø–ª–∞—Ç–∞ -->
                    <div class="ucm-tab-content" data-content="salary">
                        ${this.renderSalaryTab()}
                    </div>
                    
                    <!-- –í–∫–ª–∞–¥–∫–∞ –ü—Ä–µ–º–∏–∏/–®—Ç—Ä–∞—Ñ—ã -->
                    <div class="ucm-tab-content" data-content="bonuses">
                        ${this.renderBonusesTab()}
                    </div>
                    
                    <!-- –í–∫–ª–∞–¥–∫–∞ –ù–µ–¥–æ—Å—Ç–∞—á–∏ -->
                    <div class="ucm-tab-content" data-content="shortages">
                        ${this.renderShortagesTab()}
                    </div>
                    
                    <!-- –í–∫–ª–∞–¥–∫–∞ –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏ -->
                    <div class="ucm-tab-content" data-content="special">
                        ${this.renderSpecialTab()}
                    </div>
                </div>

                <div class="ucm-live-preview">
                    <div id="ucm-preview-content">
                        ${this.renderLivePreview()}
                    </div>
                </div>

                <div class="ucm-footer">
                    <div class="ucm-footer-left">
                        <button class="ucm-btn ucm-btn-secondary" onclick="ucModal.reset()">
                            üîÑ –°–ë–†–û–°–ò–¢–¨
                        </button>
                        <button class="ucm-btn ucm-btn-warning" onclick="ucModal.rollback()">
                            ‚Ü©Ô∏è –û–¢–ö–ê–¢
                        </button>
                        <button class="ucm-btn ucm-btn-info" onclick="ucModal.showHistory()">
                            üìú –ò–°–¢–û–†–ò–Ø
                        </button>
                    </div>
                    <div class="ucm-footer-right">
                        <button class="ucm-btn ucm-btn-lock" onclick="ucModal.fixCalculations()">
                            üîí –ó–ê–§–ò–ö–°–ò–†–û–í–ê–¢–¨
                        </button>
                        <button class="ucm-btn ucm-btn-primary" onclick="ucModal.save()">
                            üíæ –°–û–•–†–ê–ù–ò–¢–¨
                        </button>
                    </div>
                </div>
            </div>
        </div>`;

        document.body.insertAdjacentHTML('beforeend', modalHTML);

        // –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—å—é –∏ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å—é
const improvedStyle = document.createElement('style');
improvedStyle.innerHTML = `
    /* –û—Å–Ω–æ–≤–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */
    .ucm-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
    }
    
    .ucm-container {
        width: 95%;
        max-width: 1400px;
        height: 82vh;
        background: white;
        border-radius: 10px;
        display: flex;
        flex-direction: column;
        box-shadow: 0 10px 40px rgba(0,0,0,0.3);
    }

    /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */
    .ucm-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 20px;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        border-radius: 10px 10px 0 0;
    }

    .ucm-header h2 {
        font-size: 15px;
        margin: 0;
        color: white;
        font-weight: 500;
    }
    
    .ucm-close {
        background: rgba(255,255,255,0.2);
        border: none;
        color: white;
        font-size: 20px;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .ucm-close:hover {
        background: rgba(255,255,255,0.3);
    }
    
    /* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ */
    .ucm-employee-info {
        padding: 6px 20px;
        background: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }
    
    .ucm-info-card {
        display: flex;
        align-items: center;
        gap: 15px;
    }
    
    .ucm-info-card h3 {
        font-size: 14px;
        margin: 0;
        color: #2c3e50;
    }
    
    .ucm-period {
        background: white;
        padding: 3px 12px;
        border-radius: 15px;
        font-size: 12px;
        color: #667eea;
        border: 1px solid #667eea;
    }
    
    /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ */
    .ucm-tabs {
        display: flex;
        background: #f8f9fa;
        padding: 0 20px;
        border-bottom: 1px solid #dee2e6;
        height: 36px;
    }

    .ucm-tab {
        padding: 8px 12px;
        font-size: 11px;
        font-weight: 500;
        color: #6c757d;
        border: none;
        background: transparent;
        cursor: pointer;
        border-bottom: 2px solid transparent;
        transition: all 0.2s;
        white-space: nowrap;
    }
    
    .ucm-tab:hover {
        color: #495057;
        background: rgba(0,0,0,0.03);
    }
    
    .ucm-tab.active {
        color: #667eea;
        border-bottom-color: #667eea;
        background: white;
    }
    
    /* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */
    .ucm-content {
        flex: 1;
        padding: 12px 20px;
        background: white;
        overflow-y: auto;
        min-height: 0;
    }
    
    .ucm-tab-content {
        display: none;
    }
    
    .ucm-tab-content.active {
        display: block;
    }
    
    /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–≤–æ–¥–∫–∏ */
.ucm-summary-container {
    padding: 15px;
    background: #ffffff;
}

/* –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏ –≤ —Ä—è–¥ */
.ucm-summary-main {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
    margin-bottom: 20px;
}

/* –ö–∞–∂–¥—ã–π –±–ª–æ–∫ */
.ucm-summary-block {
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 0;
    overflow: hidden;
}

/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞ */
.ucm-summary-title {
    background: #e9ecef;
    padding: 10px 15px;
    font-size: 13px;
    font-weight: 600;
    color: #495057;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    border-bottom: 1px solid #dee2e6;
}

/* –ö–æ–Ω—Ç–µ–Ω—Ç –±–ª–æ–∫–∞ */
.ucm-summary-content {
    padding: 12px 15px;
}

/* –°—Ç—Ä–æ–∫–∞ –≤ –±–ª–æ–∫–µ */
.ucm-summary-line {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 6px 0;
    font-size: 13px;
    color: #495057;
}

.ucm-summary-line span {
    color: #6c757d;
}

.ucm-summary-line strong {
    font-size: 14px;
    color: #212529;
    font-weight: 600;
}

/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ */
.ucm-summary-line.total {
    margin-top: 8px;
    padding-top: 8px;
    border-top: 1px solid #dee2e6;
}

.ucm-summary-line.total strong {
    font-size: 16px;
    color: #212529;
}

/* –¶–≤–µ—Ç–æ–≤—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã */
.ucm-summary-line strong.positive {
    color: #28a745;
}

.ucm-summary-line strong.negative {
    color: #dc3545;
}

.ucm-summary-line strong.primary {
    color: #667eea;
}


/* –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –¥–Ω—è–º */
.ucm-work-days {
    margin-top: 20px;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 8px;
    border: 1px solid #e9ecef;
}

.ucm-section-header {
    font-size: 13px;
    font-weight: 600;
    color: #495057;
    margin-bottom: 12px;
    text-transform: uppercase;
}

.ucm-days-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    gap: 8px;
}

.ucm-day-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 8px;
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    font-size: 11px;
}

.day-date {
    color: #6c757d;
    margin-bottom: 4px;
}

.day-amount {
    font-weight: 600;
    color: #212529;
}

/* –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */
.ucm-validation-status {
    margin-top: 15px;
    padding: 10px;
    border-radius: 6px;
    font-size: 12px;
    display: none;
}

.ucm-validation-status.show {
    display: block;
}

.ucm-validation-status.success {
    background: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.ucm-validation-status.error {
    background: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

.ucm-validation-status.warning {
    background: #fff3cd;
    color: #856404;
    border: 1px solid #ffeaa7;
}

/* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
@media (max-width: 1200px) {
    .ucm-summary-main {
        grid-template-columns: 1fr;
    }
}

/* –£–±–∏—Ä–∞–µ–º —è—Ä–∫–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –∏–∑ —Å—Ç–∞—Ä—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ */
.ucm-summary-card {
    background: #f8f9fa !important;
    color: #212529 !important;
    box-shadow: none !important;
}
    /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ñ–æ—Ä–º—ã */
    .ucm-form-compact {
        background: #f8f9fa;
        padding: 12px;
        border-radius: 6px;
        margin-bottom: 10px;
    }

    .ucm-form-compact h4 {
        font-size: 13px;
        margin: 0 0 10px 0;
        color: #2c3e50;
        font-weight: 600;
    }

    .ucm-form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
    }

    .ucm-form-col {
        background: #f8f9fa;
        padding: 12px;
        border-radius: 6px;
    }

    .ucm-form-col h4 {
        font-size: 13px;
        margin: 0 0 10px 0;
        color: #2c3e50;
        font-weight: 600;
    }

    .ucm-form-group {
        margin-bottom: 10px;
    }
    
    .ucm-form-group label {
        display: block;
        font-size: 11px;
        margin-bottom: 4px;
        color: #495057;
        font-weight: 500;
    }
    
    .ucm-form-group input,
    .ucm-form-group select {
        width: 100%;
        padding: 5px 8px;
        font-size: 12px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        background: white;
    }
    
    .ucm-form-group input:focus,
    .ucm-form-group select:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.1);
    }
    
    .ucm-form-group small {
        display: block;
        font-size: 10px;
        margin-top: 2px;
        color: #6c757d;
    }
    
    /* –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å–µ—Ç–∫–∞ –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤ */
    .ucm-special-grid-compact {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 10px;
        padding: 10px 0;
    }

    .ucm-special-btn-compact {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 15px 8px;
        background: white;
        border: 2px solid #e9ecef;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s;
    }

    .ucm-special-btn-compact:hover {
        border-color: #667eea;
        background: #f8f9fa;
        transform: translateY(-1px);
    }

    .ucm-special-btn-compact.danger:hover {
        border-color: #dc3545;
        background: #fff5f5;
    }

    .ucm-special-btn-compact .icon {
        font-size: 20px;
        margin-bottom: 6px;
    }

    .ucm-special-btn-compact .title {
        font-size: 11px;
        font-weight: 500;
        color: #2c3e50;
        text-align: center;
    }
    
    /* –ö–û–ú–ü–ê–ö–¢–ù–´–ô –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç */
    .ucm-live-preview {
        background: #fff3cd;
        padding: 8px 20px;
        border-top: 1px solid #ffc107;
        min-height: 50px;
        max-height: 80px;
        overflow-y: auto;
    }

    .ucm-preview-compact {
        display: flex;
        flex-direction: column;
        gap: 6px;
    }

    .ucm-preview-main {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 6px;
        background: white;
        border-radius: 4px;
    }

    .ucm-preview-col {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .ucm-preview-col .label {
        font-size: 9px;
        color: #6c757d;
        text-transform: uppercase;
    }

    .ucm-preview-col .value {
        font-size: 14px;
        font-weight: 600;
        color: #2c3e50;
    }

    .ucm-preview-col .value.total {
        color: #667eea;
        font-size: 16px;
    }

    .ucm-preview-col .value.changed {
        color: #667eea;
        animation: pulse 1s infinite;
    }

    .ucm-preview-details {
        display: flex;
        align-items: center;
        gap: 6px;
        padding: 3px 6px;
        background: white;
        border-radius: 4px;
        font-size: 10px;
        flex-wrap: wrap;
    }

    .changes-label {
        font-weight: 600;
        color: #856404;
    }

    .change-item {
        padding: 1px 4px;
        background: #ffeeba;
        border-radius: 3px;
        color: #856404;
        white-space: nowrap;
    }
    
    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.7; }
    }
    
    /* –ù–µ–¥–æ—Å—Ç–∞—á–∏ */
    .ucm-shortages-list {
        max-height: 200px;
        overflow-y: auto;
        margin-bottom: 10px;
        padding: 8px;
        background: white;
        border-radius: 6px;
        border: 1px solid #e9ecef;
    }
    
    .ucm-shortage-item {
        padding: 8px;
        margin-bottom: 8px;
        background: #f8f9fa;
        border-radius: 6px;
        border-left: 3px solid #dc3545;
        font-size: 11px;
    }
    
    /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ—É—Ç–µ—Ä */
    .ucm-footer {
        display: flex;
        justify-content: space-between;
        padding: 10px 20px;
        border-top: 1px solid #dee2e6;
        background: #f8f9fa;
        border-radius: 0 0 10px 10px;
    }
    
    .ucm-footer-left,
    .ucm-footer-right {
        display: flex;
        gap: 8px;
    }
    
    .ucm-btn {
        padding: 6px 14px;
        font-size: 12px;
        font-weight: 500;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .ucm-btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 6px rgba(0,0,0,0.15);
    }
    
    .ucm-btn-primary {
        background: #667eea;
        color: white;
    }
    
    .ucm-btn-secondary {
        background: #6c757d;
        color: white;
    }
    
    .ucm-btn-warning {
        background: #ffc107;
        color: #212529;
    }
    
    .ucm-btn-info {
        background: #17a2b8;
        color: white;
    }
    
    .ucm-btn-lock {
        background: #28a745;
        color: white;
    }
    
    /* –°–∫—Ä—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞ */
    .ucm-alert {
        display: none;
    }
    
    .ucm-alert-warning {
        display: block;
        padding: 8px 12px;
        margin: 8px 0;
        border-radius: 4px;
        font-size: 11px;
        background: #fff3cd;
        color: #856404;
        border: 1px solid #ffeeba;
    }
    
    /* –ë–ª–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π */
    .ucm-changes-summary {
        margin-top: 6px;
        padding: 6px 8px;
        background: white;
        border-radius: 4px;
        border: 1px solid #ffc107;
    }

    .ucm-changes-summary h5 {
        font-size: 10px;
        margin: 0 0 4px 0;
        color: #856404;
    }

    .ucm-changes-summary ul {
        margin: 0;
        padding-left: 14px;
        font-size: 10px;
        color: #495057;
        line-height: 1.3;
    }

    .ucm-changes-summary li {
        margin-bottom: 1px;
    }
    
    .ucm-no-changes {
        text-align: center;
        padding: 10px;
        color: #6c757d;
        font-size: 11px;
    }
    
    /* –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–æ–ª–ª–±–∞—Ä */
    .ucm-content::-webkit-scrollbar,
    .ucm-shortages-list::-webkit-scrollbar,
    .ucm-live-preview::-webkit-scrollbar {
        width: 6px;
    }
    
    .ucm-content::-webkit-scrollbar-track,
    .ucm-shortages-list::-webkit-scrollbar-track,
    .ucm-live-preview::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
    }
    
    .ucm-content::-webkit-scrollbar-thumb,
    .ucm-shortages-list::-webkit-scrollbar-thumb,
    .ucm-live-preview::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 10px;
    }
    
    .ucm-content::-webkit-scrollbar-thumb:hover,
    .ucm-shortages-list::-webkit-scrollbar-thumb:hover,
    .ucm-live-preview::-webkit-scrollbar-thumb:hover {
        background: #555;
    }

    /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–∞–ª—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤ */
    @media (max-height: 768px) {
        .ucm-container {
            height: 90vh;
        }
        
        .ucm-content {
            padding: 8px 15px;
        }
        
        .ucm-summary-grid {
            gap: 8px;
        }
        
        .ucm-summary-card {
            padding: 10px;
        }
    }
`;
document.head.appendChild(improvedStyle);


        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.attachEventListeners();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
        if (this.originalData && this.originalData.isFixed) {
            this.updateFixedState();
        }
        
        // ‚≠ê‚≠ê‚≠ê –î–û–ë–ê–í–ò–¢–¨ –ó–î–ï–°–¨ –ù–û–í–´–ô –ö–û–î –î–õ–Ø –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–Ø –ò –í–ê–õ–ò–î–ê–¶–ò–ò:
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        const key = `ucm_draft_${this.currentEmployee.id}_${this.currentMonth}_${this.currentYear}`;
        const saved = localStorage.getItem(key);
        
        if (saved) {
            try {
                const data = JSON.parse(saved);
                const timeDiff = Date.now() - new Date(data.timestamp).getTime();
                const hoursDiff = timeDiff / (1000 * 60 * 60);
                
                if (hoursDiff < 24) {
                    if (confirm(`–ù–∞–π–¥–µ–Ω –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –æ—Ç ${new Date(data.timestamp).toLocaleString()}. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?`)) {
                        this.adjustedData = data.adjustedData;
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                        setTimeout(() => {
                            const advanceCardEl = document.getElementById('ucm-advance-card');
                            const advanceCashEl = document.getElementById('ucm-advance-cash');
                            const salaryCardEl = document.getElementById('ucm-salary-card');
                            const salaryCashEl = document.getElementById('ucm-salary-cash');
                            const bonusEl = document.getElementById('ucm-bonus');
                            const penaltyEl = document.getElementById('ucm-penalty');
                            
                            if (advanceCardEl) advanceCardEl.value = this.adjustedData.advanceCard || 0;
                            if (advanceCashEl) advanceCashEl.value = this.adjustedData.advanceCash || 0;
                            if (salaryCardEl) salaryCardEl.value = this.adjustedData.salaryCard || 0;
                            if (salaryCashEl) salaryCashEl.value = this.adjustedData.salaryCash || 0;
                            if (bonusEl) bonusEl.value = this.adjustedData.bonus || 0;
                            if (penaltyEl) penaltyEl.value = this.adjustedData.penalty || 0;
                            
                            this.updateCalculations();
                        }, 100);
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞:', error);
            }
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        let autoSaveTimer;
        const autoSave = () => {
            clearTimeout(autoSaveTimer);
            autoSaveTimer = setTimeout(() => {
                const saveKey = `ucm_draft_${this.currentEmployee.id}_${this.currentMonth}_${this.currentYear}`;
                const saveData = {
                    timestamp: new Date().toISOString(),
                    adjustedData: this.adjustedData,
                    changes: this.getChanges()
                };
                
                try {
                    localStorage.setItem(saveKey, JSON.stringify(saveData));
                    console.log('–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
                }
            }, 2000);
        };
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ –≤—Å–µ–º –ø–æ–ª—è–º –≤–≤–æ–¥–∞
        setTimeout(() => {
            const modal = document.getElementById('universal-corrections-modal');
            if (modal) {
                modal.querySelectorAll('input').forEach(input => {
                    input.addEventListener('input', autoSave);
                    input.addEventListener('change', autoSave);
                });
            }
        }, 100);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö
        setTimeout(() => {
            if (this.adjustedData) {
                // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
                const totalGross = this.adjustedData.totalGross || 0;
                const totalDeductions = this.adjustedData.totalDeductions || 0;
                const totalToPay = this.adjustedData.totalToPay || 0;
                const expectedToPay = totalGross - totalDeductions;
                
                if (Math.abs(totalToPay - expectedToPay) > 0.01) {
                    console.warn('–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö:', {
                        totalToPay,
                        expectedToPay,
                        difference: totalToPay - expectedToPay
                    });
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∫–∞—Ä—Ç—ã
                const totalCard = (this.adjustedData.advanceCard || 0) + (this.adjustedData.salaryCard || 0);
                if (totalCard > 8700) {
                    console.warn('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–∞—Ä—Ç—ã:', totalCard);
                }
            }
        }, 200);
        
    } // <-- –≠—Ç–æ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ createModal()

    // –†–µ–Ω–¥–µ—Ä –≤–∫–ª–∞–¥–∫–∏ –°–≤–æ–¥–∫–∞ (—Å–ª–µ–¥—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–ª–∞—Å—Å–∞)
    renderSummaryTab() {
        // ... –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ renderSummaryTab ...
    }


    // –†–µ–Ω–¥–µ—Ä –≤–∫–ª–∞–¥–∫–∏ –°–≤–æ–¥–∫–∞
renderSummaryTab() {
    const d = this.originalData;
    return `
    <div class="ucm-summary-container">
        <!-- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É -->
        <div class="ucm-summary-main">
            <div class="ucm-summary-block">
                <div class="ucm-summary-title">–ù–∞—á–∏—Å–ª–µ–Ω–∏—è</div>
                <div class="ucm-summary-content">
                    <div class="ucm-summary-line">
                        <span>–ë–∞–∑–∞ (—Å–º–µ–Ω—ã):</span>
                        <strong>${this.formatNumber(d.basePay)}</strong>
                    </div>
                    <div class="ucm-summary-line">
                        <span>–ü—Ä–µ–º–∏–∏:</span>
                        <strong class="positive">${this.formatNumber(d.bonuses)}</strong>
                    </div>
                    <div class="ucm-summary-line total">
                        <span>–ò—Ç–æ–≥–æ:</span>
                        <strong>${this.formatNumber(d.totalGross)}</strong>
                    </div>
                </div>
            </div>
            
            <div class="ucm-summary-block">
                <div class="ucm-summary-title">–í—ã—á–µ—Ç—ã</div>
                <div class="ucm-summary-content">
                    <div class="ucm-summary-line">
                        <span>–®—Ç—Ä–∞—Ñ—ã:</span>
                        <strong class="negative">${this.formatNumber(d.penalties)}</strong>
                    </div>
                    <div class="ucm-summary-line">
                        <span>–ù–µ–¥–æ—Å—Ç–∞—á–∏:</span>
                        <strong class="negative">${this.formatNumber(d.shortages)}</strong>
                    </div>
                    <div class="ucm-summary-line total">
                        <span>–ò—Ç–æ–≥–æ:</span>
                        <strong class="negative">${this.formatNumber(d.totalDeductions)}</strong>
                    </div>
                </div>
            </div>
            
            <div class="ucm-summary-block">
                <div class="ucm-summary-title">–í—ã–ø–ª–∞—Ç—ã</div>
                <div class="ucm-summary-content">
                    <div class="ucm-summary-line">
                        <span>–ê–≤–∞–Ω—Å:</span>
                        <strong>${this.formatNumber(d.advanceTotal)}</strong>
                    </div>
                    <div class="ucm-summary-line">
                        <span>–ó–∞—Ä–ø–ª–∞—Ç–∞:</span>
                        <strong>${this.formatNumber(d.salaryTotal)}</strong>
                    </div>
                    <div class="ucm-summary-line total">
                        <span>–ö –≤—ã–ø–ª–∞—Ç–µ:</span>
                        <strong class="primary">${this.formatNumber(d.totalToPay)}</strong>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –¥–Ω—è–º —Ä–∞–±–æ—Ç—ã -->
        ${this.renderWorkDaysDetails()}
        
        <!-- –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ -->
        <div class="ucm-validation-status" id="validation-status"></div>
    </div>`;
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ –¥–Ω—è–º
renderWorkDaysDetails() {
    if (!this.originalData.workDays || this.originalData.workDays.length === 0) {
        return '';
    }
    
    return `
    <div class="ucm-work-days">
        <div class="ucm-section-header">–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –¥–Ω—è–º</div>
        <div class="ucm-days-grid">
            ${this.originalData.workDays.map(day => `
                <div class="ucm-day-item">
                    <span class="day-date">${day.date}</span>
                    <span class="day-amount">${this.formatNumber(day.amount)}</span>
                </div>
            `).join('')}
        </div>
    </div>`;
}

   // –†–µ–Ω–¥–µ—Ä –≤–∫–ª–∞–¥–∫–∏ –ê–≤–∞–Ω—Å - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è
renderAdvanceTab() {
    return `
    <div class="ucm-form-compact">
        <h4>–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∞–≤–∞–Ω—Å–∞</h4>
        
        <div class="ucm-form-row">
            <div class="ucm-form-group">
                <label>üí≥ –ù–∞ –∫–∞—Ä—Ç—É (–º–∞–∫—Å. 8700):</label>
                <input type="number" id="ucm-advance-card" 
                       value="${this.adjustedData.advanceCard || 0}"
                       onchange="ucModal.updateCalculations()">
            </div>
            
            <div class="ucm-form-group">
                <label>üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏:</label>
                <input type="number" id="ucm-advance-cash" 
                       value="${this.adjustedData.advanceCash || 0}"
                       onchange="ucModal.updateCalculations()">
            </div>
        </div>
    </div>`;
}

    // –†–µ–Ω–¥–µ—Ä –≤–∫–ª–∞–¥–∫–∏ –ó–∞—Ä–ø–ª–∞—Ç–∞ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è
renderSalaryTab() {
    const maxCard = 8700 - (this.adjustedData.advanceCard || 0);
    return `
    <div class="ucm-form-compact">
        <h4>–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã</h4>
        
        <div class="ucm-form-row">
            <div class="ucm-form-group">
                <label>üí≥ –ù–∞ –∫–∞—Ä—Ç—É (–æ—Å—Ç–∞—Ç–æ–∫ ${maxCard}):</label>
                <input type="number" id="ucm-salary-card" 
                       value="${this.adjustedData.salaryCard || 0}"
                       onchange="ucModal.updateCalculations()">
            </div>
            
            <div class="ucm-form-group">
                <label>üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏:</label>
                <input type="number" id="ucm-salary-cash" 
                       value="${this.adjustedData.salaryCash || 0}"
                       onchange="ucModal.updateCalculations()">
            </div>
        </div>
    </div>`;
}


  // –†–µ–Ω–¥–µ—Ä –≤–∫–ª–∞–¥–∫–∏ –ü—Ä–µ–º–∏–∏/–®—Ç—Ä–∞—Ñ—ã - –ë–ï–ó —à–∞–±–ª–æ–Ω–æ–≤
renderBonusesTab() {
    return `
    <div class="ucm-form-row">
        <div class="ucm-form-col">
            <h4>‚ûï –ü—Ä–µ–º–∏—Ä–æ–≤–∞–Ω–∏–µ</h4>
            <div class="ucm-form-group">
                <label>–°—É–º–º–∞ –ø—Ä–µ–º–∏–∏:</label>
                <input type="number" id="ucm-bonus" 
                       value="${this.adjustedData.bonus || 0}"
                       onchange="ucModal.updateCalculations()">
            </div>
            <div class="ucm-form-group">
                <label>–ü—Ä–∏—á–∏–Ω–∞:</label>
                <input type="text" id="ucm-bonus-reason" 
                       placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É"
                       value="${this.adjustedData.bonusReason || ''}">
            </div>
        </div>
        
        <div class="ucm-form-col">
            <h4>‚ûñ –î–µ–ø—Ä–µ–º–∏—Ä–æ–≤–∞–Ω–∏–µ</h4>
            <div class="ucm-form-group">
                <label>–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–∞:</label>
                <input type="number" id="ucm-penalty" 
                       value="${this.adjustedData.penalty || 0}"
                       onchange="ucModal.updateCalculations()">
            </div>
            <div class="ucm-form-group">
                <label>–ü—Ä–∏—á–∏–Ω–∞:</label>
                <input type="text" id="ucm-penalty-reason" 
                       placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É"
                       value="${this.adjustedData.penaltyReason || ''}">
            </div>
        </div>
    </div>`;
}

    // –†–µ–Ω–¥–µ—Ä –≤–∫–ª–∞–¥–∫–∏ –ù–µ–¥–æ—Å—Ç–∞—á–∏
    renderShortagesTab() {
        return `
        <div class="ucm-form-section">
            <h4>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—á–∞–º–∏</h4>
            
            <div class="ucm-shortages-list">
                ${this.renderShortagesList()}
            </div>
            
            <div class="ucm-form-group">
                <h5>–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—á—É:</h5>
                <input type="number" id="ucm-new-shortage-amount" 
                       placeholder="–°—É–º–º–∞" style="margin-bottom: 8px;">
                <input type="text" id="ucm-new-shortage-desc" 
                       placeholder="–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–∫–ª–∞–¥–Ω–∞—è, –¥–∞—Ç–∞)" style="margin-bottom: 8px;">
                <select id="ucm-new-shortage-deduction" style="margin-bottom: 8px;">
                    <option value="advance">–í—ã—á–µ—Å—Ç—å –∏–∑ –∞–≤–∞–Ω—Å–∞</option>
                    <option value="salary">–í—ã—á–µ—Å—Ç—å –∏–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã</option>
                    <option value="both">–†–∞–∑–¥–µ–ª–∏—Ç—å 50/50</option>
                </select>
                <button class="ucm-quick-btn" style="width: 100%;" onclick="ucModal.addShortage()">
                    ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—á—É
                </button>
            </div>
        </div>`;
    }

   // –†–µ–Ω–¥–µ—Ä –≤–∫–ª–∞–¥–∫–∏ –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏ - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å–µ—Ç–∫–∞
renderSpecialTab() {
    return `
    <div class="ucm-special-grid-compact">
        <button class="ucm-special-btn-compact" onclick="ucModal.processTermination()">
            <span class="icon">üö™</span>
            <span class="title">–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ</span>
        </button>
        
        <button class="ucm-special-btn-compact" onclick="ucModal.processVacation()">
            <span class="icon">üèñÔ∏è</span>
            <span class="title">–û—Ç–ø—É—Å–∫–Ω—ã–µ</span>
        </button>
        
        <button class="ucm-special-btn-compact" onclick="ucModal.processLoan()">
            <span class="icon">üí∏</span>
            <span class="title">–ó–∞–π–º</span>
        </button>
        
        <button class="ucm-special-btn-compact danger" onclick="ucModal.suspendPayments()">
            <span class="icon">üö´</span>
            <span class="title">–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞</span>
        </button>
    </div>`;
}

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Live preview - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π
renderLivePreview() {
    const d = this.adjustedData || this.originalData;
    const changes = this.getChanges();
    const hasChanges = Object.keys(changes).length > 0;
    
    return `
    <div class="ucm-preview-compact">
        <div class="ucm-preview-main">
            <div class="ucm-preview-col">
                <span class="label">–ù–∞—á–∏—Å–ª–µ–Ω–æ:</span>
                <span class="value ${changes.totalGross ? 'changed' : ''}">${this.formatNumber(d.totalGross)} –≥—Ä–Ω</span>
            </div>
            <div class="ucm-preview-col">
                <span class="label">–í—ã—á–µ—Ç—ã:</span>
                <span class="value ${changes.totalDeductions ? 'changed' : ''}">-${this.formatNumber(d.totalDeductions)} –≥—Ä–Ω</span>
            </div>
            <div class="ucm-preview-col">
                <span class="label">–ö –≤—ã–ø–ª–∞—Ç–µ:</span>
                <span class="value total ${changes.totalToPay ? 'changed' : ''}">${this.formatNumber(d.totalToPay)} –≥—Ä–Ω</span>
            </div>
        </div>
        
        ${hasChanges ? `
        <div class="ucm-preview-details">
            <span class="changes-label">–ò–∑–º–µ–Ω–µ–Ω–∏—è:</span>
            ${Object.entries(changes).map(([key, value]) => 
                `<span class="change-item">${this.getFieldName(key)}: ${value.from}‚Üí${value.to}</span>`
            ).join(' ')}
        </div>` : ''}
    </div>`;
}
// –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å:
togglePreview() {
    const content = document.getElementById('preview-content');
    const icon = document.getElementById('preview-toggle-icon');
    const button = icon.parentElement;
    
    if (content.style.display === 'none') {
        content.style.display = 'block';
        icon.textContent = '‚ñº';
        button.textContent = icon.textContent + ' –°–≤–µ—Ä–Ω—É—Ç—å';
    } else {
        content.style.display = 'none';
        icon.textContent = '‚ñ∂';
        button.textContent = icon.textContent + ' –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å';
    }
}

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    renderChangesSummary() {
        const changes = this.getChanges();
        if (Object.keys(changes).length === 0) {
            return '<div class="ucm-no-changes">–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç</div>';
        }
        
        let html = '<div class="ucm-changes-summary"><h5>–í–Ω–µ—Å–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</h5><ul>';
        for (const [key, value] of Object.entries(changes)) {
            html += `<li>${this.getFieldName(key)}: ${value.from} ‚Üí ${value.to}</li>`;
        }
        html += '</ul></div>';
        return html;
    }

    // –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—á
    renderShortagesList() {
        if (!this.adjustedData || !this.adjustedData.shortagesList || this.adjustedData.shortagesList.length === 0) {
            return '<p style="text-align: center; color: #6c757d; padding: 20px;">–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—á</p>';
        }
        
        const shortages = this.adjustedData.shortagesList;
        let html = '';
        
        shortages.forEach((shortage, index) => {
            html += `
                <div class="ucm-shortage-item">
                    <div style="display: flex; justify-content: space-between; align-items: start;">
                        <div>
                            <strong>–ù–µ–¥–æ—Å—Ç–∞—á–∞ #${index + 1}</strong><br>
                            <small>–°—É–º–º–∞: ${this.formatNumber(shortage.amount)} –≥—Ä–Ω</small><br>
                            <small>–û–ø–∏—Å–∞–Ω–∏–µ: ${shortage.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</small><br>
                            <small>–í—ã—á–µ—Ç –∏–∑: ${shortage.deduction_from === 'advance' ? '–ê–≤–∞–Ω—Å' : 
                                             shortage.deduction_from === 'salary' ? '–ó–∞—Ä–ø–ª–∞—Ç–∞' : 
                                             '–†–∞–∑–¥–µ–ª–∏—Ç—å 50/50'}</small>
                        </div>
                        <button onclick="ucModal.removeShortage('${shortage.id}')" 
                                style="padding: 5px 10px; background: #dc3545; color: white; 
                                       border: none; border-radius: 4px; cursor: pointer;">
                            üóëÔ∏è
                        </button>
                    </div>
                </div>`;
        });
        
        return html;
    }

    // –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    attachEventListeners() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.ucm-tab').forEach(tab => {
            tab.addEventListener('click', (e) => {
                const tabName = e.target.dataset.tab;
                
                // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
                document.querySelectorAll('.ucm-tab').forEach(t => t.classList.remove('active'));
                document.querySelectorAll('.ucm-tab-content').forEach(c => c.classList.remove('active'));
                
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é
                e.target.classList.add('active');
                document.querySelector(`[data-content="${tabName}"]`).classList.add('active');
            });
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
        document.querySelector('.ucm-overlay').addEventListener('click', (e) => {
            if (e.target.classList.contains('ucm-overlay')) {
                this.close();
            }
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤
    updateCalculations() {
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–æ—Ä–º—ã
        this.adjustedData.advanceCard = parseFloat(document.getElementById('ucm-advance-card')?.value) || 0;
        this.adjustedData.advanceCash = parseFloat(document.getElementById('ucm-advance-cash')?.value) || 0;
        this.adjustedData.salaryCard = parseFloat(document.getElementById('ucm-salary-card')?.value) || 0;
        this.adjustedData.salaryCash = parseFloat(document.getElementById('ucm-salary-cash')?.value) || 0;
        this.adjustedData.bonus = parseFloat(document.getElementById('ucm-bonus')?.value) || 0;
        this.adjustedData.penalty = parseFloat(document.getElementById('ucm-penalty')?.value) || 0;
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        this.adjustedData.totalGross = this.adjustedData.basePay + this.adjustedData.bonus;
        this.adjustedData.totalDeductions = this.adjustedData.penalty + (this.adjustedData.shortages || 0);
        this.adjustedData.totalToPay = this.adjustedData.totalGross - this.adjustedData.totalDeductions;
        this.adjustedData.advanceTotal = this.adjustedData.advanceCard + this.adjustedData.advanceCash;
        this.adjustedData.salaryTotal = this.adjustedData.salaryCard + this.adjustedData.salaryCash;
        
        // –û—Ç–º–µ—á–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        this.hasUnsavedChanges = true;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
        document.getElementById('ucm-preview-content').innerHTML = this.renderLivePreview();
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    async save() {
        const changes = this.getChanges();
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º
        if (Object.keys(changes).length === 0) {
            alert('–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            this.close();
            return;
        }
        
        if (!confirm('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è?')) {
            return;
        }
        
        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            const dataToSave = {
                employee_id: this.currentEmployee.id,
                month: this.currentMonth,
                year: this.currentYear,
                corrections: {
                    advanceCard: this.adjustedData.advanceCard,
                    advanceCash: this.adjustedData.advanceCash,
                    salaryCard: this.adjustedData.salaryCard,
                    salaryCash: this.adjustedData.salaryCash,
                    bonus: this.adjustedData.bonus || 0,
                    penalty: this.adjustedData.penalty || 0,
                    bonusReason: document.getElementById('ucm-bonus-reason')?.value || '',
                    penaltyReason: document.getElementById('ucm-penalty-reason')?.value || '',
                    shortagesList: this.adjustedData.shortagesList || []
                },
                changes: changes
            };
            
            const response = await fetch(`${API_BASE}/save-universal-corrections`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify(dataToSave)
            });
            
            const result = await response.json();
            
            if (result.success) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if (Object.keys(changes).length > 0) {
                    this.saveStateForHistory();
                }
                
                showModalNotification('‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
                this.close();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                if (typeof generateMonthlyReport === 'function') {
                    generateMonthlyReport();
                }
            } else {
                alert('–û—à–∏–±–∫–∞: ' + result.error);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    getChanges() {
        const changes = {};
        const fields = ['advanceCard', 'advanceCash', 'salaryCard', 'salaryCash', 
                       'bonus', 'penalty', 'totalGross', 'totalDeductions', 'totalToPay'];
        
        for (const field of fields) {
            const originalValue = this.originalData[field] || 0;
            const adjustedValue = this.adjustedData[field] || 0;
            
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            if (Math.abs(originalValue - adjustedValue) > 0.01) {
                changes[field] = {
                    from: originalValue,
                    to: adjustedValue
                };
            }
        }
        
        return changes;
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    close() {
        if (this.hasUnsavedChanges) {
            const changes = this.getChanges();
            if (Object.keys(changes).length > 0) {
                if (!confirm('–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ó–∞–∫—Ä—ã—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?')) {
                    return;
                }
            }
        }
        
        const modal = document.getElementById('universal-corrections-modal');
        if (modal) modal.remove();
    }

    // –°–±—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π
    reset() {
        if (!confirm('–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º?')) return;
        
        this.adjustedData = JSON.parse(JSON.stringify(this.originalData));
        this.hasUnsavedChanges = false;
        this.createModal(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    formatNumber(num) {
        return new Intl.NumberFormat('ru-RU').format(num || 0);
    }

    getMonthName(month) {
        const names = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                      "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"];
        return names[month - 1];
    }

    getFieldName(key) {
        const names = {
            advanceCard: '–ê–≤–∞–Ω—Å –Ω–∞ –∫–∞—Ä—Ç—É',
            advanceCash: '–ê–≤–∞–Ω—Å –Ω–∞–ª–∏—á–Ω—ã–º–∏',
            salaryCard: '–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –∫–∞—Ä—Ç—É',
            salaryCash: '–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏',
            bonus: '–ü—Ä–µ–º–∏—è',
            penalty: '–®—Ç—Ä–∞—Ñ',
            totalGross: '–í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ',
            totalDeductions: '–í—Å–µ–≥–æ –≤—ã—á–µ—Ç–æ–≤',
            totalToPay: '–ö –≤—ã–ø–ª–∞—Ç–µ'
        };
        return names[key] || key;
    }

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    setAdvancePreset(type) {
        const advanceCardInput = document.getElementById('ucm-advance-card');
        const advanceCashInput = document.getElementById('ucm-advance-cash');
        
        if (!advanceCardInput || !advanceCashInput) return;
        
        switch(type) {
            case 'standard':
                const standardAdvance = Math.min(
                    Math.floor((this.originalData.basePay * 0.9) / 100) * 100,
                    7900
                );
                advanceCardInput.value = standardAdvance;
                advanceCashInput.value = 0;
                break;
                
            case 'max':
                advanceCardInput.value = 7900;
                advanceCashInput.value = 0;
                break;
                
            case 'zero':
                advanceCardInput.value = 0;
                advanceCashInput.value = 0;
                break;
                
            case 'custom':
                const customAmount = prompt('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∞–≤–∞–Ω—Å–∞:', '5000');
                if (customAmount) {
                    const amount = parseFloat(customAmount) || 0;
                    if (amount > 8700) {
                        alert('–°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –∫–∞—Ä—Ç—ã (8700 –≥—Ä–Ω)');
                        advanceCardInput.value = 8700;
                        advanceCashInput.value = amount - 8700;
                    } else {
                        advanceCardInput.value = amount;
                        advanceCashInput.value = 0;
                    }
                }
                break;
        }
        
        this.updateCalculations();
    }

    handleReasonChange(select) {
        const customInput = document.getElementById('ucm-advance-reason-custom');
        if (select.value === 'other') {
            customInput.style.display = 'block';
        } else {
            customInput.style.display = 'none';
        }
    }

    autoDistribute() {
        const totalToPay = this.adjustedData.totalToPay || 0;
        const advanceTotal = this.adjustedData.advanceTotal || 0;
        const remaining = totalToPay - advanceTotal;
        
        if (remaining <= 0) {
            alert('–ù–µ—Ç –æ—Å—Ç–∞—Ç–∫–∞ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è');
            return;
        }
        
        const maxCard = 8700 - (this.adjustedData.advanceCard || 0);
        const cardAmount = Math.min(remaining, maxCard);
        const cashAmount = remaining - cardAmount;
        
        document.getElementById('ucm-salary-card').value = cardAmount;
        document.getElementById('ucm-salary-cash').value = cashAmount;
        
        this.updateCalculations();
    }

    applyTemplate(type, amount, reason) {
        if (type === 'bonus') {
            document.getElementById('ucm-bonus').value = amount;
            document.getElementById('ucm-bonus-reason').value = reason;
        } else if (type === 'penalty') {
            document.getElementById('ucm-penalty').value = amount;
            document.getElementById('ucm-penalty-reason').value = reason;
        }
        this.updateCalculations();
    }

    addShortage() {
        const amount = parseFloat(document.getElementById('ucm-new-shortage-amount')?.value) || 0;
        const description = document.getElementById('ucm-new-shortage-desc')?.value || '';
        const deduction = document.getElementById('ucm-new-shortage-deduction')?.value || 'advance';
        
        if (amount <= 0) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –Ω–µ–¥–æ—Å—Ç–∞—á–∏');
            return;
        }
        
        if (!this.adjustedData.shortagesList) {
            this.adjustedData.shortagesList = [];
        }
        
        this.adjustedData.shortagesList.push({
            id: 'new_' + Date.now(),
            amount: amount,
            description: description,
            deduction_from: deduction,
            is_new: true
        });
        
        this.adjustedData.shortages = (this.adjustedData.shortages || 0) + amount;
        
        // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–º –≤–∫–ª–∞–¥–∫—É
        document.querySelector('[data-content="shortages"]').innerHTML = this.renderShortagesTab();
        
        this.updateCalculations();
    }

    removeShortage(shortageId) {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—á—É?')) return;
        
        if (this.adjustedData.shortagesList) {
            const shortage = this.adjustedData.shortagesList.find(s => s.id === shortageId);
            if (shortage) {
                this.adjustedData.shortages = Math.max(0, (this.adjustedData.shortages || 0) - shortage.amount);
                this.adjustedData.shortagesList = this.adjustedData.shortagesList.filter(s => s.id !== shortageId);
                
                // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–º –≤–∫–ª–∞–¥–∫—É
                document.querySelector('[data-content="shortages"]').innerHTML = this.renderShortagesTab();
                
                this.updateCalculations();
            }
        }
    }

    processTermination() {
        if (!confirm('–û—Ñ–æ—Ä–º–∏—Ç—å —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –≤—ã–ø–ª–∞—Ç–æ–π?')) return;
        
        const total = this.adjustedData.totalToPay;
        
        document.getElementById('ucm-advance-card').value = Math.min(total, 8700);
        document.getElementById('ucm-advance-cash').value = Math.max(0, total - 8700);
        document.getElementById('ucm-salary-card').value = 0;
        document.getElementById('ucm-salary-cash').value = 0;
        
        this.adjustedData.isTermination = true;
        this.adjustedData.terminationReason = prompt('–ü—Ä–∏—á–∏–Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è:', '–ü–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∂–µ–ª–∞–Ω–∏—é');
        
        this.updateCalculations();
    }

    processLoan() {
        const loanAmount = prompt('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–π–º–∞:', '3000');
        if (!loanAmount) return;
        
        const amount = parseFloat(loanAmount) || 0;
        if (amount <= 0) {
            alert('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞');
            return;
        }
        
        const maxCard = 8700;
        document.getElementById('ucm-advance-card').value = Math.min(amount, maxCard);
        document.getElementById('ucm-advance-cash').value = Math.max(0, amount - maxCard);
        
        this.adjustedData.loanAmount = amount;
        this.adjustedData.loanReason = '–ó–∞–π–º –≤ —Å—á–µ—Ç –±—É–¥—É—â–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã';
        
        document.getElementById('ucm-salary-card').value = 0;
        document.getElementById('ucm-salary-cash').value = 0;
        
        alert(`–û—Ñ–æ—Ä–º–ª–µ–Ω –∑–∞–π–º –Ω–∞ —Å—É–º–º—É ${this.formatNumber(amount)} –≥—Ä–Ω`);
        this.updateCalculations();
    }

    processVacation() {
        const vacationDays = prompt('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞:', '14');
        if (!vacationDays) return;
        
        const days = parseInt(vacationDays) || 0;
        if (days <= 0) {
            alert('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π');
            return;
        }
        
        const dailyRate = this.originalData.basePay / 22;
        const vacationAmount = Math.round(dailyRate * days);
        
        document.getElementById('ucm-advance-card').value = Math.min(vacationAmount, 8700);
        document.getElementById('ucm-advance-cash').value = Math.max(0, vacationAmount - 8700);
        
        this.adjustedData.vacationDays = days;
        this.adjustedData.vacationAmount = vacationAmount;
        
        alert(`–û—Ñ–æ—Ä–º–ª–µ–Ω—ã –æ—Ç–ø—É—Å–∫–Ω—ã–µ –Ω–∞ ${days} –¥–Ω–µ–π: ${this.formatNumber(vacationAmount)} –≥—Ä–Ω`);
        this.updateCalculations();
    }

    suspendPayments() {
        if (!confirm('–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?')) return;
        
        const reason = prompt('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏:', '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω–æ–µ –≤–∑—ã—Å–∫–∞–Ω–∏–µ');
        if (!reason) return;
        
        document.getElementById('ucm-advance-card').value = 0;
        document.getElementById('ucm-advance-cash').value = 0;
        document.getElementById('ucm-salary-card').value = 0;
        document.getElementById('ucm-salary-cash').value = 0;
        
        this.adjustedData.paymentsSuspended = true;
        this.adjustedData.suspensionReason = reason;
        
        alert('–í—ã–ø–ª–∞—Ç—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
        this.updateCalculations();
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    validateData() {
        const errors = [];
        const warnings = [];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—É–º–º
        const totalGross = this.adjustedData.totalGross || 0;
        const totalDeductions = this.adjustedData.totalDeductions || 0;
        const totalToPay = this.adjustedData.totalToPay || 0;
        const expectedToPay = totalGross - totalDeductions;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
        if (Math.abs(totalToPay - expectedToPay) > 0.01) {
            errors.push(`–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: ${totalToPay} ‚â† ${expectedToPay}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∫–∞—Ä—Ç—ã
        const advanceCard = this.adjustedData.advanceCard || 0;
        const salaryCard = this.adjustedData.salaryCard || 0;
        const totalCard = advanceCard + salaryCard;
        
        if (totalCard > 8700) {
            errors.push(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–∞—Ä—Ç—ã: ${totalCard} > 8700`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞–Ω—Å–æ–≤
        const advanceTotal = this.adjustedData.advanceCard + this.adjustedData.advanceCash;
        if (advanceTotal > 7900 && !this.adjustedData.isTermination && !this.adjustedData.loanAmount) {
            warnings.push(`–ê–≤–∞–Ω—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏–º–∏—Ç: ${advanceTotal} > 7900`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (totalToPay < 0) {
            errors.push(`–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ: ${totalToPay}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—á
        if (this.adjustedData.shortages > 0 && (!this.adjustedData.shortagesList || this.adjustedData.shortagesList.length === 0)) {
            warnings.push('–ï—Å—Ç—å —Å—É–º–º–∞ –Ω–µ–¥–æ—Å—Ç–∞—á, –Ω–æ –Ω–µ—Ç –¥–µ—Ç–∞–ª–µ–π');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—É–º–º—ã –≤—ã–ø–ª–∞—Ç
        const totalPayments = this.adjustedData.advanceTotal + this.adjustedData.salaryTotal;
        if (Math.abs(totalPayments - totalToPay) > 0.01 && !this.adjustedData.paymentsSuspended) {
            warnings.push(`–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç (${totalPayments}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏—Ç–æ–≥—É (${totalToPay})`);
        }
        
        return { errors, warnings };
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    showValidationStatus(errors, warnings) {
        const statusEl = document.getElementById('validation-status');
        if (!statusEl) {
            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            const previewEl = document.getElementById('ucm-preview-content');
            if (previewEl) {
                const statusDiv = document.createElement('div');
                statusDiv.id = 'validation-status';
                statusDiv.className = 'ucm-validation-status';
                previewEl.appendChild(statusDiv);
            }
        }
        
        const status = document.getElementById('validation-status');
        if (!status) return;
        
        if (errors.length === 0 && warnings.length === 0) {
            status.className = 'ucm-validation-status success show';
            status.innerHTML = '‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã';
        } else if (errors.length > 0) {
            status.className = 'ucm-validation-status error show';
            status.innerHTML = `‚ùå –û—à–∏–±–∫–∏:<br>${errors.join('<br>')}`;
        } else if (warnings.length > 0) {
            status.className = 'ucm-validation-status warning show';
            status.innerHTML = `‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:<br>${warnings.join('<br>')}`;
        }
        
        // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            status.classList.remove('show');
        }, 5000);
    }
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    setupAutoSave() {
        let autoSaveTimer;
        
        const autoSave = () => {
            clearTimeout(autoSaveTimer);
            autoSaveTimer = setTimeout(() => {
                this.saveToLocalStorage();
            }, 2000);
        };
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –≤—Å–µ–º –ø–æ–ª—è–º –≤–≤–æ–¥–∞
        document.querySelectorAll('#universal-corrections-modal input').forEach(input => {
            input.addEventListener('input', autoSave);
            input.addEventListener('change', autoSave);
        });
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
    saveToLocalStorage() {
        const key = `ucm_draft_${this.currentEmployee.id}_${this.currentMonth}_${this.currentYear}`;
        const data = {
            timestamp: new Date().toISOString(),
            adjustedData: this.adjustedData,
            changes: this.getChanges()
        };
        
        try {
            localStorage.setItem(key, JSON.stringify(data));
            console.log('–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        }
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ localStorage
    loadFromLocalStorage() {
        const key = `ucm_draft_${this.currentEmployee.id}_${this.currentMonth}_${this.currentYear}`;
        const saved = localStorage.getItem(key);
        
        if (saved) {
            try {
                const data = JSON.parse(saved);
                const timeDiff = Date.now() - new Date(data.timestamp).getTime();
                const hoursDiff = timeDiff / (1000 * 60 * 60);
                
                if (hoursDiff < 24) {
                    if (confirm(`–ù–∞–π–¥–µ–Ω –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –æ—Ç ${new Date(data.timestamp).toLocaleString()}. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?`)) {
                        this.adjustedData = data.adjustedData;
                        return true;
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            }
        }
        return false;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    createBackup() {
        const backup = {
            timestamp: new Date().toISOString(),
            data: JSON.parse(JSON.stringify(this.adjustedData))
        };
        
        sessionStorage.setItem('ucm_last_backup', JSON.stringify(backup));
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    restoreFromBackup() {
        const backup = sessionStorage.getItem('ucm_last_backup');
        if (backup) {
            const data = JSON.parse(backup);
            this.adjustedData = data.data;
            this.createModal();
            showModalNotification('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏', 'success');
        }
    }
    
    // –†–∞—Å—á–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
    calculateChecksum() {
        const data = JSON.stringify(this.adjustedData);
        let hash = 0;
        for (let i = 0; i < data.length; i++) {
            const char = data.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash;
        }
        return hash.toString(16);
    }
    
    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    setLoadingState(isLoading) {
        const modal = document.getElementById('universal-corrections-modal');
        if (!modal) return;
        
        if (isLoading) {
            modal.style.pointerEvents = 'none';
            modal.style.opacity = '0.7';
            
            const loader = document.createElement('div');
            loader.id = 'ucm-loader';
            loader.style.cssText = `
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 1000;
                background: white;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            `;
            loader.innerHTML = '‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
            modal.appendChild(loader);
        } else {
            modal.style.pointerEvents = '';
            modal.style.opacity = '';
            const loader = document.getElementById('ucm-loader');
            if (loader) loader.remove();
        }
    }
    
    // ========== –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò ==========
    
    // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è save() —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    async save() {
        // –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–ï–†–ï–î –°–û–•–†–ê–ù–ï–ù–ò–ï–ú
        const { errors, warnings } = this.validateData();
        
        if (errors.length > 0) {
            this.showValidationStatus(errors, warnings);
            alert(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å - –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏:\n${errors.join('\n')}`);
            return;
        }
        
        if (warnings.length > 0) {
            this.showValidationStatus([], warnings);
            if (!confirm(`–ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n${warnings.join('\n')}\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ?`)) {
                return;
            }
        }
        
        const changes = this.getChanges();
        
        if (Object.keys(changes).length === 0) {
            alert('–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return;
        }
        
        if (!confirm('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è?')) {
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        this.createBackup();
        
        try {
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.setLoadingState(true);
            
            const dataToSave = {
                employee_id: this.currentEmployee.id,
                month: this.currentMonth,
                year: this.currentYear,
                corrections: {
                    advanceCard: this.adjustedData.advanceCard,
                    advanceCash: this.adjustedData.advanceCash,
                    salaryCard: this.adjustedData.salaryCard,
                    salaryCash: this.adjustedData.salaryCash,
                    bonus: this.adjustedData.bonus || 0,
                    penalty: this.adjustedData.penalty || 0,
                    bonusReason: document.getElementById('ucm-bonus-reason')?.value || '',
                    penaltyReason: document.getElementById('ucm-penalty-reason')?.value || '',
                    shortagesList: this.adjustedData.shortagesList || []
                },
                changes: changes,
                validation: {
                    checksum: this.calculateChecksum(),
                    timestamp: new Date().toISOString()
                }
            };
            
            const response = await fetch(`${API_BASE}/save-universal-corrections`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify(dataToSave)
            });
            
            const result = await response.json();
            
            if (result.success) {
                // –û—á–∏—â–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
                const key = `ucm_draft_${this.currentEmployee.id}_${this.currentMonth}_${this.currentYear}`;
                localStorage.removeItem(key);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                if (Object.keys(changes).length > 0) {
                    this.saveStateForHistory();
                }
                
                showModalNotification('‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã', 'success');
                this.close();
                
                if (typeof generateMonthlyReport === 'function') {
                    generateMonthlyReport();
                }
            } else {
                alert('–û—à–∏–±–∫–∞: ' + result.error);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
            
            // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            if (confirm('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ?')) {
                this.restoreFromBackup();
            }
        } finally {
            this.setLoadingState(false);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    saveStateForHistory() {
        const state = {
            employee_id: this.currentEmployee.id,
            employee_name: this.currentEmployee.name,
            month: this.currentMonth,
            year: this.currentYear,
            timestamp: new Date().toISOString(),
            data: JSON.parse(JSON.stringify(this.adjustedData))
        };
        
        const history = JSON.parse(localStorage.getItem('ucm_history') || '[]');
        history.push(state);
        
        // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
        if (history.length > 20) {
            history.shift();
        }
        
        localStorage.setItem('ucm_history', JSON.stringify(history));
    }

    // –û—Ç–∫–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    async rollback() {
        const history = JSON.parse(localStorage.getItem('ucm_history') || '[]');
        
        if (history.length === 0) {
            alert('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞');
            return;
        }
        
        const lastState = history[history.length - 1];
        
        if (!confirm(`–û—Ç–∫–∞—Ç–∏—Ç—å –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ—Ç ${new Date(lastState.timestamp).toLocaleString()}?`)) {
            return;
        }
        
        try {
            const response = await fetch(`${API_BASE}/save-universal-corrections`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify({
                    employee_id: lastState.employee_id,
                    month: lastState.month,
                    year: lastState.year,
                    corrections: lastState.data,
                    changes: { rollback: true }
                })
            });
            
            const result = await response.json();
            
            if (result.success) {
                history.pop();
                localStorage.setItem('ucm_history', JSON.stringify(history));
                
                showModalNotification('‚úÖ –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
                this.close();
                
                if (typeof generateMonthlyReport === 'function') {
                    generateMonthlyReport();
                }
            }
        } catch (error) {
            alert('–û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: ' + error.message);
        }
    }

    // –ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏
    showHistory() {
        const history = JSON.parse(localStorage.getItem('ucm_history') || '[]');
        
        if (history.length === 0) {
            alert('–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É—Å—Ç–∞');
            return;
        }
        
        let historyHTML = `
            <div style="
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: white;
                padding: 25px;
                border-radius: 12px;
                box-shadow: 0 10px 40px rgba(0,0,0,0.3);
                max-width: 700px;
                max-height: 500px;
                overflow-y: auto;
                z-index: 10001;
            " id="history-modal">
                <h3 style="margin-bottom: 20px; color: #2c3e50;">üìú –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π</h3>
                <div style="max-height: 350px; overflow-y: auto;">`;
        
        history.reverse().forEach((item, index) => {
            const date = new Date(item.timestamp);
            historyHTML += `
                <div style="
                    padding: 15px;
                    margin-bottom: 12px;
                    background: #f8f9fa;
                    border-radius: 8px;
                    border-left: 3px solid #667eea;
                ">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <strong style="color: #2c3e50;">${item.employee_name || this.currentEmployee.name}</strong><br>
                            <small style="color: #6c757d;">${date.toLocaleString('ru-RU')}</small><br>
                            <small style="color: #495057;">
                                –ê–≤–∞–Ω—Å: ${this.formatNumber(item.data.advanceTotal || 0)} –≥—Ä–Ω | 
                                –ó–∞—Ä–ø–ª–∞—Ç–∞: ${this.formatNumber(item.data.salaryTotal || 0)} –≥—Ä–Ω
                            </small>
                        </div>
                        <button onclick="ucModal.restoreFromHistory(${history.length - 1 - index})" 
                                style="padding: 6px 12px; background: #667eea; color: white; 
                                       border: none; border-radius: 6px; cursor: pointer; font-size: 12px;">
                            –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                        </button>
                    </div>
                </div>`;
        });
        
        historyHTML += `
                </div>
                <div style="text-align: center; margin-top: 20px; display: flex; gap: 10px; justify-content: center;">
                    <button onclick="document.getElementById('history-modal').remove(); document.getElementById('history-overlay').remove();" 
                            style="padding: 10px 25px; background: #6c757d; color: white; 
                                   border: none; border-radius: 6px; cursor: pointer;">
                        –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                    <button onclick="ucModal.clearHistory()" 
                            style="padding: 10px 25px; background: #dc3545; color: white; 
                                   border: none; border-radius: 6px; cursor: pointer;">
                        –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
                    </button>
                </div>
            </div>
            <div id="history-overlay" style="
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.5);
                z-index: 10000;
            " onclick="document.getElementById('history-modal').remove(); this.remove();"></div>`;
        
        document.body.insertAdjacentHTML('beforeend', historyHTML);
    }

    restoreFromHistory(index) {
        const history = JSON.parse(localStorage.getItem('ucm_history') || '[]');
        
        if (index >= 0 && index < history.length) {
            const state = history[index];
            
            if (confirm(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç ${new Date(state.timestamp).toLocaleString()}?`)) {
                this.adjustedData = JSON.parse(JSON.stringify(state.data));
                
                const historyModal = document.getElementById('history-modal');
                const historyOverlay = document.getElementById('history-overlay');
                if (historyModal) historyModal.remove();
                if (historyOverlay) historyOverlay.remove();
                
                this.createModal();
                
                showModalNotification('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
            }
        }
    }

    clearHistory() {
        if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
            localStorage.removeItem('ucm_history');
            
            const historyModal = document.getElementById('history-modal');
            const historyOverlay = document.getElementById('history-overlay');
            if (historyModal) historyModal.remove();
            if (historyOverlay) historyOverlay.remove();
            
            showModalNotification('üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞', 'info');
        }
    }

    // –§–∏–∫—Å–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤
    async fixCalculations() {
        if (!confirm('–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã? –ü–æ—Å–ª–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–º–∏.')) {
            return;
        }
        
        try {
            const response = await fetch(`${API_BASE}/fix-universal-calculations`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify({
                    employee_id: this.currentEmployee.id,
                    month: this.currentMonth,
                    year: this.currentYear,
                    calculations: this.adjustedData
                })
            });
            
            const result = await response.json();
            
            if (result.success) {
                showModalNotification('üîí –†–∞—Å—á–µ—Ç—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã', 'success');
                this.originalData.isFixed = true;
                this.adjustedData.isFixed = true;
                
                this.updateFixedState();
            }
        } catch (error) {
            alert('–û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏: ' + error.message);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    updateFixedState() {
        if (this.adjustedData.isFixed) {
            const header = document.querySelector('.ucm-header h2');
            if (header && !header.innerHTML.includes('üîí')) {
                header.innerHTML = 'üîí ' + header.innerHTML;
            }
            
            const warningHTML = `
                <div class="ucm-alert ucm-alert-warning" style="margin: 15px 0;">
                    ‚ö†Ô∏è –†–∞—Å—á–µ—Ç—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–º–µ–Ω–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏.
                </div>
            `;
            
            const content = document.querySelector('.ucm-content');
            if (content && !document.querySelector('.ucm-alert-warning')) {
                content.insertAdjacentHTML('afterbegin', warningHTML);
            }
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const ucModal = new UniversalCorrectionsModal();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.ucModal = ucModal;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
if (typeof showModalNotification === 'undefined') {
    window.showModalNotification = function(message, type = 'info') {
        const colors = {
            success: '#28a745',
            error: '#dc3545',
            warning: '#ffc107',
            info: '#17a2b8'
        };
        
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            background: ${colors[type] || colors.info};
            color: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            z-index: 10002;
            animation: slideIn 0.3s ease;
            font-size: 14px;
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    };
}
